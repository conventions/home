<?xml version="1.0" encoding="UTF-8"?>
<!--
To change this template, choose Tools | Templates
and open the template in the editor.
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<ui:composition
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://java.sun.com/jsf/facelets">
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jsf.conventions.showcase.controller;

import com.jsf.conventions.bean.AbstractConversationalMBean;
import com.jsf.conventions.bean.modal.ModalObserver;
import com.jsf.conventions.event.ModalCallback;
import com.jsf.conventions.exception.BusinessException;
import com.jsf.conventions.showcase.model.Person;
import com.jsf.conventions.showcase.service.PersonService;
import com.jsf.conventions.showcase.util.ConstantUtils;
import com.jsf.conventions.util.MessagesController;
import java.io.Serializable;
import java.util.ArrayList;
import javax.enterprise.context.ConversationScoped;
import javax.enterprise.event.Observes;
import javax.inject.Inject;
import javax.inject.Named;

/**
 *
 * @author Rafael M. Pestano Mar 19, 2011 2:16:11 PM
 */
@ConversationScoped
@Named(value="personConversationMBean")
public class PersonConversationMBean extends AbstractConversationalMBean&lt;Person&gt; implements Serializable, ModalObserver {

    /**
     * this method is REQUIRED to tell the framework how to 'crud' the managed bean's entity
     * @param personService
     */
    @Inject
    public void setPersonService(PersonService personService) {
        super.setBaseService(personService);
    }

    public PersonService getPersonService(){
        return (PersonService)super.getBaseService();
    }

    /**
     * 
     * this method is called on saveButton is clicked 
     * you do not need to override it
     */
    @Override
    public void store() {

        super.store();
    }

    /**
     * removeFromList is called by removeButton with persistentRemove="false"
     */
    @Override
    public void removeFromList() {
        if (getEntity().getFriends() == null) {
            return;
        }
        if (getEntity().hasFriend(getEntityAux().getId())) {
            getEntity().removeFriend(getEntityAux().getId());
            MessagesController.addInfo("Friend removed from list");
        }
    }

    /**
     * this method is called after 'newButton' is clicked  
     * you dont need to override this method
     */
    @Override
    public String afterPrepareInsert() {
        beginConversation();
        return "addUserConversation.faces?cid=" + conversation.getId() + "&amp;amp;faces-redirect=true";
    }



    /**
     * this method is called after 'editButton' is clicked
     * you dont need to override this method
     */
    @Override
    public String afterPrepareUpdate() {
        beginConversation();
        return "addUserConversation.faces?cid=" + conversation.getId() + "&amp;amp;faces-redirect=true";
    }

    /**
     * called when 'filterButton' is clicked
     * you dont need to override this method
     */
    @Override
    public void find() {
    }



    @Override
    public Person create() {
        Person p = new Person();
        p.setAge(25);
        return p;
    }

    public String back() {
        return goList();
    }

    public String backEdit() {
        return "addUserConversation.faces?cid=" + conversation.getId() + "&amp;amp;faces-redirect=true";
    }

    public String associateFriends() {
        return "addFriendConversation.faces?cid=" + conversation.getId() + "&amp;amp;faces-redirect=true";
    }

    @Override
   public void modalResponse(@Observes ModalCallback callback) {
        
        /**
         * invokerName is used for identifying purposes as ModalCallback event
         * can be observed by various managed beans.
         */
        if(callback.getInvokerName() != null &amp;&amp; callback.getInvokerName().equals(ConstantUtils.Invoker.PERSON_CONVERSATION_BEAN)){
            if (getEntity().getFriends() == null) {
                getEntity().setFriends(new ArrayList&lt;Person&gt;());
            }
            Person[] selectedPerson = (Person[]) callback.getResult();
            for (Person person : selectedPerson) {
                if (!getEntity().hasFriend(person.getId())) {
                    getEntity().getFriends().add(getPersonService().load(person.getId()));
                }
            }
        }
    }
    
     public void initPersonSelectionModal() {
        Map&lt;String,Object&gt; parameters = new HashMap&lt;String, Object&gt;();
        parameters.put("age", getEntity().getAge());
        parameters.put("ignoreId", getEntity().getId());
        super.initModal(PersonSelectionModalMBean.MODAL_NAME, parameters);
    }
     
     public String goList(){
         beginConversation();
         return "personConversation.faces??cid=" + conversation.getId() + "&amp;amp;faces-redirect=true";
     }
}
</ui:composition> 